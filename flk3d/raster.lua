FLK3D = FLK3D or {}
local math = math
local math_floor = math.floor

local function math_round(x)
	local dec = x - math_floor(x)
	if dec > .5 then
		return math.ceil(x)
	else
		return math_floor(x)
	end
end



function FLK3D.RenderPixel(x, y, cont)
	local rt = FLK3D.CurrRT
	local rtParams = rt._params
	local rtW, rtH = rtParams.w, rtParams.h

	rt[x + (y * rtW)] = cont

end


local function lineLow(x1, y1, x2, y2, cont, w, h, rt)
	local dx = x2 - x1
	local dy = y2 - y1
	local yi = 1
	if dy < 0 then
		yi = -1
		dy = -dy
	end

	local D = (2 * dy) - dx
	local y = y1

	for x = x1, x2 do
		if y >= h then
			goto _contLineLow
		end

		if x >= w then
			goto _contLineLow
		end

		if y < 0 then
			goto _contLineLow
		end

		if x < 0 then
			goto _contLineLow
		end


		rt[x + (y * w)] = cont
		::_contLineLow::

		if D > 0 then
			y = y + yi
			D = D + (2 * (dy - dx))
		else
			D = D + 2 * dy
		end
	end
end

local function lineHigh(x1, y1, x2, y2, cont, w, h, rt)
	local dx = x2 - x1
	local dy = y2 - y1
	local xi = 1
	if dx < 0 then
		xi = -1
		dx = -dx
	end
	local D = (2 * dx) - dy
	local x = x1

	if y1 > h then
		return
	end

	for y = y1, y2 do
		if y >= h then
			goto _contLineHigh
		end

		if x >= w then
			goto _contLineHigh
		end

		if y < 0 then
			goto _contLineHigh
		end

		if x < 0 then
			goto _contLineHigh
		end


		rt[x + (y * w)] = cont
		::_contLineHigh::

		if D > 0 then
			x = x + xi
			D = D + (2 * (dx - dy))
		else
			D = D + 2 * dx
		end

	end
end


-- https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm
function FLK3D.RenderLine(x1, y1, x2, y2, cont)
	local rt = FLK3D.CurrRT
	local rtParams = rt._params
	local rtW, rtH = rtParams.w, rtParams.h


	if math.abs(y2 - y1) < math.abs(x2 - x1) then
		if x1 > x2 then
			lineLow(x2, y2, x1, y1, cont, rtW, rtH, rt)
		else
			lineLow(x1, y1, x2, y2, cont, rtW, rtH, rt)
		end
	else
		if y1 > y2 then
			lineHigh(x2, y2, x1, y1, cont, rtW, rtH, rt)
		else
			lineHigh(x1, y1, x2, y2, cont, rtW, rtH, rt)
		end
	end

	if love and _LKPXDEBUG then
		FLK3D.LOVE_DEBUG_BUFF[#FLK3D.LOVE_DEBUG_BUFF + 1] = {
			type = "line",
			start = {x1, y1},
			endpos = {x2, y2},
			col = cont
		}
	end
end


local function baryCentric(px, py, ax, ay, bx, by, cx, cy)
	local v0 = Vector(bx - ax, by - ay)
	local v1 = Vector(cx - ax, cy - ay)
	local v2 = Vector(px - ax, py - ay)

	local d00 = v0:Dot(v0)
	local d01 = v0:Dot(v1)
	local d11 = v1:Dot(v1)
	local d20 = v2:Dot(v0)
	local d21 = v2:Dot(v1)

	local denom = d00 * d11 - d01 * d01
	local v = (d11 * d20 - d01 * d21) / denom
	local w = (d00 * d21 - d01 * d20) / denom
	local u = 1 - v - w

	return v, w, u
end


local bayer4 = {
	 0 / 16,  8 / 16,  1 / 16,  9 / 16,
	12 / 16,  4 / 16, 13 / 16,  5 / 16,
	 3 / 16, 11 / 16,  2 / 16, 10 / 16,
	15 / 16,  7 / 16, 14 / 16,  6 / 16,
}


local perspCol = FLK3D.DO_PERSP_CORRECT_COLOUR
local perspTex = FLK3D.DO_PERSP_CORRECT_TEXTURE
local renderHalf = FLK3D.RENDER_HALF

local _TEX_NEAREST = 0
local _TEX_BAYER = 1
local _TEX_LINEAR = 2

local _table = {255, 0, 0}
local _white = {255, 255, 255}
local _wfCol = {0, 255, 0}
local texMode = FLK3D.TEXINTERP_MODE


local function lerp(t, a, b)
	return a * (1-t) + b * t
end
function FLK3D.RenderTriangleSimple(x0, y0, x1, y1, x2, y2, c0, c1, c2, v0_w, v1_w, v2_w, u0, v0, u1, v1, u2, v2, tdata)
	local rt = FLK3D.CurrRT
	local rtParams = rt._params
	local rtW, rtH = rtParams.w, rtParams.h

	local dbuff = rt._depth

	--[[
	x0 = math_floor(x0)
	y0 = math_floor(y0)
	x1 = math_floor(x1)
	y1 = math_floor(y1)
	x2 = math_floor(x2)
	y2 = math_floor(y2)
	]]--

	if FLK3D.WIREFRAME then
		x0 = math_floor(x0)
		y0 = math_floor(y0)
		x1 = math_floor(x1)
		y1 = math_floor(y1)
		x2 = math_floor(x2)
		y2 = math_floor(y2)

		FLK3D.RenderLine(x0, y0, x1, y1, _wfCol)
		FLK3D.RenderLine(x0, y0, x2, y2, _wfCol)

		FLK3D.RenderLine(x1, y1, x2, y2, _wfCol)

		return
	end


	local minX = math.min(x0, x1, x2)
	local minY = math.min(y0, y1, y2)
	local maxX = math.max(x0, x1, x2)
	local maxY = math.max(y0, y1, y2)

	minX = math.max(minX, 0)
	minY = math.max(minY, 0)
	maxX = math.min(maxX, rtW - 1)
	maxY = math.min(maxY, rtH - 1)

	local texW, texH = tdata.data[1], tdata.data[2]


	local rtFrame = rt._frame or 0
	for y = minY, maxY do
		for x = minX, maxX do
			--x, y = math_round(x), math_round(y)
			x, y = math_floor(x + .5), math_floor(y + .5)

			if renderHalf and ((x + y) + rtFrame) % 2 == 0 then
				goto _contBary
			end


			local w1, w2, w0 = baryCentric(x + .5, y + .5, x0, y0, x1, y1, x2, y2)

			if w0 < 0 or w1 < 0 or w2 < 0 then
				goto _contBary
			end

			local wCalc = -((w0 * v0_w) + (w1 * v1_w) + (w2 * v2_w))
			local dCalc = (1 / wCalc)

			local prev = dbuff[x + (y * rtW)]
			if (dCalc < prev) then
				local negW = -wCalc
				local uCalc = ((w0 * u0) + (w1 * u1) + (w2 * u2))
				local vCalc = ((w0 * v0) + (w1 * v1) + (w2 * v2))

				if perspTex then
					uCalc = uCalc / negW
					vCalc = vCalc / negW
				end

				local tCol = _table
				if texMode == _TEX_NEAREST then
					local tu = math_floor(texW * uCalc) % texW
					local tv = math_floor(texH * vCalc) % texH

					tCol = tdata[tu + (tv * texW)]
				elseif texMode == _TEX_BAYER then
					local bayerIdx = (x % 4) + ((y % 4) * 4) + 1

					local tu = math_floor((texW * uCalc) + bayer4[bayerIdx]) % texW
					local tv = math_floor((texH * vCalc) + bayer4[bayerIdx]) % texH

					tCol = tdata[tu + (tv * texW)]
				elseif texMode == _TEX_LINEAR then
					local du = (texW * uCalc) % 1
					local dv = (texH * vCalc) % 1


					local tu = math_floor(texW * uCalc) % texW
					local tv = math_floor(texH * vCalc) % texH

					local tu_a = math_floor((texW * uCalc) + 1) % texW
					local tv_a = math_floor((texH * vCalc) + 1) % texH


					local sp_tl = tdata[tu + (tv * texW)]
					local sp_tr = tdata[tu_a + (tv * texW)]

					local sp_bl = tdata[tu + (tv_a * texW)]
					local sp_br = tdata[tu_a + (tv_a * texW)]


					local _lerpH_T = {lerp(du, sp_tl[1], sp_tr[1]), lerp(du, sp_tl[2], sp_tr[2]), lerp(du, sp_tl[3], sp_tr[3])}
					local _lerpH_B = {lerp(du, sp_bl[1], sp_br[1]), lerp(du, sp_bl[2], sp_br[2]), lerp(du, sp_bl[3], sp_br[3])}


					tCol = {lerp(dv, _lerpH_T[1], _lerpH_B[1]), lerp(dv, _lerpH_T[2], _lerpH_B[2]), lerp(dv, _lerpH_T[3], _lerpH_B[3])}

					--local _t_data = tdata[tu + (tv * texW)]
					--tCol = {_t_data[1] + (du * 64), _t_data[2] + (dv * 64), _t_data[3]}
				end

				local rCalc = ((w0 * c0[1]) + (w1 * c1[1]) + (w2 * c2[1]))
				local gCalc = ((w0 * c0[2]) + (w1 * c1[2]) + (w2 * c2[2]))
				local bCalc = ((w0 * c0[3]) + (w1 * c1[3]) + (w2 * c2[3]))

				if perspCol then
					rCalc = rCalc / negW
					gCalc = gCalc / negW
					bCalc = bCalc / negW
				end

				rt[x + (y * rtW)] = {tCol[1] * rCalc, tCol[2] * gCalc, tCol[3] * bCalc}
				dbuff[x + (y * rtW)] = dCalc

				-- overdraw test
				--local contPrev = rt[x + (y * rtW)]
				--local _add = 16
				--rt[x + (y * rtW)] = {contPrev[1] + _add, contPrev[2] + _add, contPrev[3] + _add}

				-- zbuffer see
				-- local dCol = dCalc * 16
				-- rt[x + (y * rtW)] = {dCol, dCol, dCol}

				if FLK3D.Debug then
					FLK3D.DebugFragments = FLK3D.DebugFragments + 1
				end
			end

			::_contBary::
		end
	end
end



local fontnw = {
	{0x00, 0x00, 0x00, 0x00, 0x00},
	{0x3E, 0x5B, 0x4F, 0x5B, 0x3E},
	{0x3E, 0x6B, 0x4F, 0x6B, 0x3E},
	{0x1C, 0x3E, 0x7C, 0x3E, 0x1C},
	{0x18, 0x3C, 0x7E, 0x3C, 0x18},
	{0x1C, 0x57, 0x7D, 0x57, 0x1C},
	{0x1C, 0x5E, 0x7F, 0x5E, 0x1C},
	{0x00, 0x18, 0x3C, 0x18, 0x00},
	{0xFF, 0xE7, 0xC3, 0xE7, 0xFF},
	{0x00, 0x18, 0x24, 0x18, 0x00},
	{0xFF, 0xE7, 0xDB, 0xE7, 0xFF},
	{0x30, 0x48, 0x3A, 0x06, 0x0E},
	{0x26, 0x29, 0x79, 0x29, 0x26},
	{0x40, 0x7F, 0x05, 0x05, 0x07},
	{0x40, 0x7F, 0x05, 0x25, 0x3F},
	{0x5A, 0x3C, 0xE7, 0x3C, 0x5A},
	{0x7F, 0x3E, 0x1C, 0x1C, 0x08},
	{0x08, 0x1C, 0x1C, 0x3E, 0x7F},
	{0x14, 0x22, 0x7F, 0x22, 0x14},
	{0x5F, 0x5F, 0x00, 0x5F, 0x5F},
	{0x06, 0x09, 0x7F, 0x01, 0x7F},
	{0x00, 0x66, 0x89, 0x95, 0x6A},
	{0x60, 0x60, 0x60, 0x60, 0x60},
	{0x94, 0xA2, 0xFF, 0xA2, 0x94},
	{0x08, 0x04, 0x7E, 0x04, 0x08},
	{0x10, 0x20, 0x7E, 0x20, 0x10},
	{0x08, 0x08, 0x2A, 0x1C, 0x08},
	{0x08, 0x1C, 0x2A, 0x08, 0x08},
	{0x1E, 0x10, 0x10, 0x10, 0x10},
	{0x0C, 0x1E, 0x0C, 0x1E, 0x0C},
	{0x30, 0x38, 0x3E, 0x38, 0x30},
	{0x06, 0x0E, 0x3E, 0x0E, 0x06},
	{0x00, 0x00, 0x00, 0x00, 0x00},
	{0x00, 0x00, 0x5F, 0x00, 0x00},
	{0x00, 0x07, 0x00, 0x07, 0x00},
	{0x14, 0x7F, 0x14, 0x7F, 0x14},
	{0x24, 0x2A, 0x7F, 0x2A, 0x12},
	{0x23, 0x13, 0x08, 0x64, 0x62},
	{0x36, 0x49, 0x56, 0x20, 0x50},
	{0x00, 0x08, 0x07, 0x03, 0x00},
	{0x00, 0x1C, 0x22, 0x41, 0x00},
	{0x00, 0x41, 0x22, 0x1C, 0x00},
	{0x2A, 0x1C, 0x7F, 0x1C, 0x2A},
	{0x08, 0x08, 0x3E, 0x08, 0x08},
	{0x00, 0x80, 0x70, 0x30, 0x00},
	{0x08, 0x08, 0x08, 0x08, 0x08},
	{0x00, 0x00, 0x60, 0x60, 0x00},
	{0x20, 0x10, 0x08, 0x04, 0x02},
	{0x3E, 0x51, 0x49, 0x45, 0x3E},
	{0x00, 0x42, 0x7F, 0x40, 0x00},
	{0x72, 0x49, 0x49, 0x49, 0x46},
	{0x21, 0x41, 0x49, 0x4D, 0x33},
	{0x18, 0x14, 0x12, 0x7F, 0x10},
	{0x27, 0x45, 0x45, 0x45, 0x39},
	{0x3C, 0x4A, 0x49, 0x49, 0x31},
	{0x41, 0x21, 0x11, 0x09, 0x07},
	{0x36, 0x49, 0x49, 0x49, 0x36},
	{0x46, 0x49, 0x49, 0x29, 0x1E},
	{0x00, 0x00, 0x14, 0x00, 0x00},
	{0x00, 0x40, 0x34, 0x00, 0x00},
	{0x00, 0x08, 0x14, 0x22, 0x41},
	{0x14, 0x14, 0x14, 0x14, 0x14},
	{0x00, 0x41, 0x22, 0x14, 0x08},
	{0x02, 0x01, 0x59, 0x09, 0x06},
	{0x3E, 0x41, 0x5D, 0x59, 0x4E},
	{0x7C, 0x12, 0x11, 0x12, 0x7C},
	{0x7F, 0x49, 0x49, 0x49, 0x36},
	{0x3E, 0x41, 0x41, 0x41, 0x22},
	{0x7F, 0x41, 0x41, 0x41, 0x3E},
	{0x7F, 0x49, 0x49, 0x49, 0x41},
	{0x7F, 0x09, 0x09, 0x09, 0x01},
	{0x3E, 0x41, 0x41, 0x51, 0x73},
	{0x7F, 0x08, 0x08, 0x08, 0x7F},
	{0x00, 0x41, 0x7F, 0x41, 0x00},
	{0x20, 0x40, 0x41, 0x3F, 0x01},
	{0x7F, 0x08, 0x14, 0x22, 0x41},
	{0x7F, 0x40, 0x40, 0x40, 0x40},
	{0x7F, 0x02, 0x1C, 0x02, 0x7F},
	{0x7F, 0x04, 0x08, 0x10, 0x7F},
	{0x3E, 0x41, 0x41, 0x41, 0x3E},
	{0x7F, 0x09, 0x09, 0x09, 0x06},
	{0x3E, 0x41, 0x51, 0x21, 0x5E},
	{0x7F, 0x09, 0x19, 0x29, 0x46},
	{0x26, 0x49, 0x49, 0x49, 0x32},
	{0x03, 0x01, 0x7F, 0x01, 0x03},
	{0x3F, 0x40, 0x40, 0x40, 0x3F},
	{0x1F, 0x20, 0x40, 0x20, 0x1F},
	{0x3F, 0x40, 0x38, 0x40, 0x3F},
	{0x63, 0x14, 0x08, 0x14, 0x63},
	{0x03, 0x04, 0x78, 0x04, 0x03},
	{0x61, 0x59, 0x49, 0x4D, 0x43},
	{0x00, 0x7F, 0x41, 0x41, 0x41},
	{0x02, 0x04, 0x08, 0x10, 0x20},
	{0x00, 0x41, 0x41, 0x41, 0x7F},
	{0x04, 0x02, 0x01, 0x02, 0x04},
	{0x40, 0x40, 0x40, 0x40, 0x40},
	{0x00, 0x03, 0x07, 0x08, 0x00},
	{0x20, 0x54, 0x54, 0x78, 0x40},
	{0x7F, 0x28, 0x44, 0x44, 0x38},
	{0x38, 0x44, 0x44, 0x44, 0x28},
	{0x38, 0x44, 0x44, 0x28, 0x7F},
	{0x38, 0x54, 0x54, 0x54, 0x18},
	{0x00, 0x08, 0x7E, 0x09, 0x02},
	{0x18, 0xA4, 0xA4, 0x9C, 0x78},
	{0x7F, 0x08, 0x04, 0x04, 0x78},
	{0x00, 0x44, 0x7D, 0x40, 0x00},
	{0x20, 0x40, 0x40, 0x3D, 0x00},
	{0x7F, 0x10, 0x28, 0x44, 0x00},
	{0x00, 0x41, 0x7F, 0x40, 0x00},
	{0x7C, 0x04, 0x78, 0x04, 0x78},
	{0x7C, 0x08, 0x04, 0x04, 0x78},
	{0x38, 0x44, 0x44, 0x44, 0x38},
	{0xFC, 0x18, 0x24, 0x24, 0x18},
	{0x18, 0x24, 0x24, 0x18, 0xFC},
	{0x7C, 0x08, 0x04, 0x04, 0x08},
	{0x48, 0x54, 0x54, 0x54, 0x24},
	{0x04, 0x04, 0x3F, 0x44, 0x24},
	{0x3C, 0x40, 0x40, 0x20, 0x7C},
	{0x1C, 0x20, 0x40, 0x20, 0x1C},
	{0x3C, 0x40, 0x30, 0x40, 0x3C},
	{0x44, 0x28, 0x10, 0x28, 0x44},
	{0x4C, 0x90, 0x90, 0x90, 0x7C},
	{0x44, 0x64, 0x54, 0x4C, 0x44},
	{0x00, 0x08, 0x36, 0x41, 0x00},
	{0x00, 0x00, 0x77, 0x00, 0x00},
	{0x00, 0x41, 0x36, 0x08, 0x00},
	{0x02, 0x01, 0x02, 0x04, 0x02},
	{0x3C, 0x26, 0x23, 0x26, 0x3C},
	{0x1E, 0xA1, 0xA1, 0x61, 0x12},
	{0x3A, 0x40, 0x40, 0x20, 0x7A},
	{0x38, 0x54, 0x54, 0x55, 0x59},
	{0x21, 0x55, 0x55, 0x79, 0x41},
	{0x22, 0x54, 0x54, 0x78, 0x42},
	{0x21, 0x55, 0x54, 0x78, 0x40},
	{0x20, 0x54, 0x55, 0x79, 0x40},
	{0x0C, 0x1E, 0x52, 0x72, 0x12},
	{0x39, 0x55, 0x55, 0x55, 0x59},
	{0x39, 0x54, 0x54, 0x54, 0x59},
	{0x39, 0x55, 0x54, 0x54, 0x58},
	{0x00, 0x00, 0x45, 0x7C, 0x41},
	{0x00, 0x02, 0x45, 0x7D, 0x42},
	{0x00, 0x01, 0x45, 0x7C, 0x40},
	{0x7D, 0x12, 0x11, 0x12, 0x7D},
	{0xF0, 0x28, 0x25, 0x28, 0xF0},
	{0x7C, 0x54, 0x55, 0x45, 0x00},
	{0x20, 0x54, 0x54, 0x7C, 0x54},
	{0x7C, 0x0A, 0x09, 0x7F, 0x49},
	{0x32, 0x49, 0x49, 0x49, 0x32},
	{0x3A, 0x44, 0x44, 0x44, 0x3A},
	{0x32, 0x4A, 0x48, 0x48, 0x30},
	{0x3A, 0x41, 0x41, 0x21, 0x7A},
	{0x3A, 0x42, 0x40, 0x20, 0x78},
	{0x00, 0x9D, 0xA0, 0xA0, 0x7D},
	{0x3D, 0x42, 0x42, 0x42, 0x3D},
	{0x3D, 0x40, 0x40, 0x40, 0x3D},
	{0x3C, 0x24, 0xFF, 0x24, 0x24},
	{0x48, 0x7E, 0x49, 0x43, 0x66},
	{0x2B, 0x2F, 0xFC, 0x2F, 0x2B},
	{0xFF, 0x09, 0x29, 0xF6, 0x20},
	{0xC0, 0x88, 0x7E, 0x09, 0x03},
	{0x20, 0x54, 0x54, 0x79, 0x41},
	{0x00, 0x00, 0x44, 0x7D, 0x41},
	{0x30, 0x48, 0x48, 0x4A, 0x32},
	{0x38, 0x40, 0x40, 0x22, 0x7A},
	{0x00, 0x7A, 0x0A, 0x0A, 0x72},
	{0x7D, 0x0D, 0x19, 0x31, 0x7D},
	{0x26, 0x29, 0x29, 0x2F, 0x28},
	{0x26, 0x29, 0x29, 0x29, 0x26},
	{0x30, 0x48, 0x4D, 0x40, 0x20},
	{0x38, 0x08, 0x08, 0x08, 0x08},
	{0x08, 0x08, 0x08, 0x08, 0x38},
	{0x2F, 0x10, 0xC8, 0xAC, 0xBA},
	{0x2F, 0x10, 0x28, 0x34, 0xFA},
	{0x00, 0x00, 0x7B, 0x00, 0x00},
	{0x08, 0x14, 0x2A, 0x14, 0x22},
	{0x22, 0x14, 0x2A, 0x14, 0x08},
	{0x55, 0x00, 0x55, 0x00, 0x55},
	{0xAA, 0x55, 0xAA, 0x55, 0xAA},
	{0xFF, 0x55, 0xFF, 0x55, 0xFF},
	{0x00, 0x00, 0x00, 0xFF, 0x00},
	{0x10, 0x10, 0x10, 0xFF, 0x00},
	{0x14, 0x14, 0x14, 0xFF, 0x00},
	{0x10, 0x10, 0xFF, 0x00, 0xFF},
	{0x10, 0x10, 0xF0, 0x10, 0xF0},
	{0x14, 0x14, 0x14, 0xFC, 0x00},
	{0x14, 0x14, 0xF7, 0x00, 0xFF},
	{0x00, 0x00, 0xFF, 0x00, 0xFF},
	{0x14, 0x14, 0xF4, 0x04, 0xFC},
	{0x14, 0x14, 0x17, 0x10, 0x1F},
	{0x10, 0x10, 0x1F, 0x10, 0x1F},
	{0x14, 0x14, 0x14, 0x1F, 0x00},
	{0x10, 0x10, 0x10, 0xF0, 0x00},
	{0x00, 0x00, 0x00, 0x1F, 0x10},
	{0x10, 0x10, 0x10, 0x1F, 0x10},
	{0x10, 0x10, 0x10, 0xF0, 0x10},
	{0x00, 0x00, 0x00, 0xFF, 0x10},
	{0x10, 0x10, 0x10, 0x10, 0x10},
	{0x10, 0x10, 0x10, 0xFF, 0x10},
	{0x00, 0x00, 0x00, 0xFF, 0x14},
	{0x00, 0x00, 0xFF, 0x00, 0xFF},
	{0x00, 0x00, 0x1F, 0x10, 0x17},
	{0x00, 0x00, 0xFC, 0x04, 0xF4},
	{0x14, 0x14, 0x17, 0x10, 0x17},
	{0x14, 0x14, 0xF4, 0x04, 0xF4},
	{0x00, 0x00, 0xFF, 0x00, 0xF7},
	{0x14, 0x14, 0x14, 0x14, 0x14},
	{0x14, 0x14, 0xF7, 0x00, 0xF7},
	{0x14, 0x14, 0x14, 0x17, 0x14},
	{0x10, 0x10, 0x1F, 0x10, 0x1F},
	{0x14, 0x14, 0x14, 0xF4, 0x14},
	{0x10, 0x10, 0xF0, 0x10, 0xF0},
	{0x00, 0x00, 0x1F, 0x10, 0x1F},
	{0x00, 0x00, 0x00, 0x1F, 0x14},
	{0x00, 0x00, 0x00, 0xFC, 0x14},
	{0x00, 0x00, 0xF0, 0x10, 0xF0},
	{0x10, 0x10, 0xFF, 0x10, 0xFF},
	{0x14, 0x14, 0x14, 0xFF, 0x14},
	{0x10, 0x10, 0x10, 0x1F, 0x00},
	{0x00, 0x00, 0x00, 0xF0, 0x10},
	{0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
	{0xF0, 0xF0, 0xF0, 0xF0, 0xF0},
	{0xFF, 0xFF, 0xFF, 0x00, 0x00},
	{0x00, 0x00, 0x00, 0xFF, 0xFF},
	{0x0F, 0x0F, 0x0F, 0x0F, 0x0F},
	{0x38, 0x44, 0x44, 0x38, 0x44},
	{0xFC, 0x4A, 0x4A, 0x4A, 0x34},
	{0x7E, 0x02, 0x02, 0x06, 0x06},
	{0x02, 0x7E, 0x02, 0x7E, 0x02},
	{0x63, 0x55, 0x49, 0x41, 0x63},
	{0x38, 0x44, 0x44, 0x3C, 0x04},
	{0x40, 0x7E, 0x20, 0x1E, 0x20},
	{0x06, 0x02, 0x7E, 0x02, 0x02},
	{0x99, 0xA5, 0xE7, 0xA5, 0x99},
	{0x1C, 0x2A, 0x49, 0x2A, 0x1C},
	{0x4C, 0x72, 0x01, 0x72, 0x4C},
	{0x30, 0x4A, 0x4D, 0x4D, 0x30},
	{0x30, 0x48, 0x78, 0x48, 0x30},
	{0xBC, 0x62, 0x5A, 0x46, 0x3D},
	{0x3E, 0x49, 0x49, 0x49, 0x00},
	{0x7E, 0x01, 0x01, 0x01, 0x7E},
	{0x2A, 0x2A, 0x2A, 0x2A, 0x2A},
	{0x44, 0x44, 0x5F, 0x44, 0x44},
	{0x40, 0x51, 0x4A, 0x44, 0x40},
	{0x40, 0x44, 0x4A, 0x51, 0x40},
	{0x00, 0x00, 0xFF, 0x01, 0x03},
	{0xE0, 0x80, 0xFF, 0x00, 0x00},
	{0x08, 0x08, 0x6B, 0x6B, 0x08},
	{0x36, 0x12, 0x36, 0x24, 0x36},
	{0x06, 0x0F, 0x09, 0x0F, 0x06},
	{0x00, 0x00, 0x18, 0x18, 0x00},
	{0x00, 0x00, 0x10, 0x10, 0x00},
	{0x30, 0x40, 0xFF, 0x01, 0x01},
	{0x00, 0x1F, 0x01, 0x01, 0x1E},
	{0x00, 0x19, 0x1D, 0x17, 0x12},
	{0x00, 0x3C, 0x3C, 0x3C, 0x3C},
	{0x00, 0x00, 0x00, 0x00, 0x00}
}


function FLK3D.DrawText(content, message, xAdd, yAdd, background)
	local rt = FLK3D.CurrRT
	local rtParams = rt._params
	local rtW, rtH = rtParams.w, rtParams.h

	local charCount = #message
	local ym = yAdd * rtW
	for i = 1, charCount do
		local xOff = (i - 1) * 6
		local char = string.sub(message, i, i)

		local base = xAdd + xOff + ym
		char = string.upper(char)

		local idx = string.byte(char) + 1
		local tblData = fontnw[idx]

		if not tblData then
			tblData = font[0x7e]
		end

		for x = 1, 6 do
			local tblDataRow = tblData[x]

			for y = 0, 6 do
				local xmReal = (x - 1)
				local ymLocal = y * rtW

				local realPos = xmReal + ymLocal + base
				if (background ~= nil) and x == 6 then
					rt[realPos] = background
					goto _contText
				elseif x == 6 then
					goto _contText
				end


				local shouldPlace = bit.band(tblDataRow, bit.lshift(1, y))
				if shouldPlace ~= 0 then
					rt[realPos] = content
				elseif background ~= nil then
					rt[realPos] = background
				end

				::_contText::
			end
		end
	end

end
